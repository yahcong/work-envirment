 git show
  825  git commit --am
  826  git show
  828  dmesg
  830  git diff 
  831  git diff
  832  git status
  833  git show
  835  git status
  837  rm * -f
  838  rm * -fr
  840  git status .
  841  git checkout .
  842  git status .
  843  git show
  845  git checkout -b test
  846  git pull ssh://ycong@code.engineering.redhat.com:22/kernel-general refs/changes/46/104846/7
  848  git show
  850  cd testcase/
  852  cd ..
  853  git show
  854  git log --oneline
  856  git show
  858  1git fetch ssh://ycong@code.engineering.redhat.com:22/kernel-general refs/changes/46/104846/7 && git checkout FETCH_HEAD
  859  git log --oneline
  860  git reset f09b341 --hard
  862  git show
  863  git fetch ssh://ycong@code.engineering.redhat.com:22/kernel-general refs/changes/46/104846/7 && git checkout FETCH_HEAD
  864  git show
  866  git commit --am
  867  git show
  869  git log --oneline
  870  git show f09b341
修改commit : git commit --am
  875  git log --oneline
  876  ls
  877  git checkout master
  878  ls
  879  git cherry-pick 6377049
  880  ls
  881  git show
  882  git review
  883  git log --oneline
  884  git reset f09b341  --hard
  885  git show
  886  ls
  887  git pull --rebase
  888  git cherry-pick 6377049
  889  git show
  890  ls
  891  git review
--
git show
显示具体的代码改动情况
显示最后一次 commit 修改的内容：
git commit --am
修改最后一次 commit的内容
---

如果换做执行git reset --soft(默认) HEAD~1后，运行git log
commit2: add test2.c
commit1: add test1.c
运行git status， 则test3.c处于暂存区，准备提交。
如果换做执行git reset --hard HEAD~1后，
显示：HEAD is now at commit2，运行git log
commit2: add test2.c
commit1: add test1.c
运行git st， 没有任何变化
----
git revert 是生成一个新的提交来撤销某次提交，此次提交之前的commit都会被保留
git reset 是回到某次提交，提交及之前的commit都会被保留，但是此次之后的修改都会被退回到暂存区
---
git checkout -- file可以丢弃工作区的修改：

$ git checkout -- readme.txt
命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：

一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；

一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

总之，就是让这个文件回到最近一次git commit或git add时的状态。
---
当我们需要删除暂存区或分支上的文件, 同时工作区也不需要这个文件了, 可以使用

git rm file_path
当我们需要删除暂存区或分支上的文件, 但本地又需要使用, 只是不希望这个文件被版本控制, 可以使用

git rm --cached file_path
file_path 为文件路径
---rm--
rm test.txt後
-->
1.确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit：

$ git rm test.txt
rm 'test.txt'
$ git commit -m "remove test.txt"
[master d17efd8] remove test.txt
 1 file changed, 1 deletion(-)
 delete mode 100644 test.txt
2.另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：

$ git checkout -- test.txt
---撤銷
保留自己的更改
git reset --soft HEAD~1
---恢復出場設置
git reset --hard HEAD~1 
