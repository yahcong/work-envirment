# 获取主干最新代码
$ git checkout master
$ git pull

# 新建一个开发分支myfeature
$ git checkout -b myfeature

$ git add --all
$ git status
$ git commit --verbose
git commit 命令的verbose参数，会列出 diff 的结果。

分支的开发过程中，要经常与主干保持同步。
$ git fetch origin
$ git rebase origin/master

将多个commit合并这就要用到 git rebase 命令。
$ git rebase -i origin/master
git rebase命令的i参数表示互动（interactive），这时git会打开一个互动界面，进行下一步操作。
 
git log b37676fec5937c9f35d75bcafa81979bc2b54980
  760  yum install -y git-email
  761  sudo yum install -y git-email
  764  git status
  765  git commit -sm "add test case for cve bug 1398457"
  767  git format-patch -1
  769  git status
  770  git lola
  772  git-review 
git send-email  0001-XXXX.patch --to kernel-gernel-qe@redhat.com --cc chuhu@redhat.com 
To register as a user with Engineering's Gerrit:
Go to https://code.engineering.redhat.com.
Upload your public ssh key.
From the top menu bar, click Settings. 
From the side menu bar, click SSH Public Keys.
In the Add SSH Public Key box, paste the contents of your public key ~/.ssh/id_rsa.pub.
Click Add.

git config --list 查看系统变量的配置

从暂存中移除，但不删除文件：
git rm –cached readme.txt
取消暂存：
git reset HEAD readme.txt
放弃未暂存文件所做的修改：
git checkout – readme.txt

git clone git@github.com:$your_github_username/kdump-test.git   kdump-test-local
cd kdump-test-local
git remote add upstream git@github.com:kdump-test/kdump-test.git
git remote -v
Rebase your master branch to make sure it's up to date with upstream kdump-test
git pull --rebase upstream master # resolve the conflict if any, and repeat step 5.b
git push -f
//同步origin 与master
git pull --rebase upstream master  # no conflict should be seen. 
git push

diff
$ diff -u hello world | less -N >diff.txt
以减号（-）开始的行是只出现在原始文件中的行，而在目标文件中不存在，即被删除的内容.
以加号（+）开始的行是只出现在目标文件中的行，而在原始文件中不存在，即新增加的内容。
有了原始文件（hello）和差异文件（diff.txt），若目标文件（world）被删除或被覆盖，可以用下面的命令来恢复目标文件（world）：
rm b
cp a b
patch b < diff.txt
反之亦然。用目标文件（world）和差异文件（diff.txt）来恢复原始文件（hello），使用如下操作：
cp b a
patch -R a < diff.txt
命令diff和patch还可以对目录进行比较和恢复操作
----
首先建立一个新的工作目录，进入该目录后，执行git init创建版本库。
$ cd /path/to/my/workspace
$ mkdir demo
$ cd demo
$ git init
初始化空的 Git 版本库于 /path/to/my/workspace/demo/.git/
实际上，如果Git的版本是1.6.5或更新的版本，可以在git init命令的后面直接输入目录名称，自动完成目录的创建。
$ cd /path/to/my/workspace
$ git init demo
初始化空的 Git 版本库于 /path/to/my/workspace/demo/.git/
$ cd demo
从上面版本库初始化后的输出中，可以看到执行git init命令在工作区创建了隐藏目录.git。
这个隐藏的.git目录就是Git版本库（又叫仓库，repository）。
-------
显示版本库.git目录所在的位置。
$ git rev-parse --git-dir
/path/to/my/workspace/demo/.git
显示工作区根目录。
$ git rev-parse --show-toplevel
/path/to/my/workspace/demo

打开/.git/config文件进行编辑。
git config -e
编辑文件，或命令行，如：
$ git config user.name
$ git config user.email

打开用户主目录下的.gitconfig文件,全局配置文件进行编辑。
git config -e --global
编辑文件，或命令行，如：
    git config --global user.name "Your Name"
    git config --global user.email you@example.com

执行下面的命令，将打开/etc/gitconfig系统级配置文件进行编辑。
如果Git安装在/usr/local/bin下，这个系统级的配置文件也可能是在/usr/local/etc/gitconfig。
$ git config -e --system
---修改提交者信息：
提交者的信息是由之前设置的环境变量user.name和user.email给出的。而最新的提交（上面第一个提交）因为删除了user.name和user.email，提交时Git对提交者的用户名和邮件地址做了大胆的猜测，这个猜测可能是错的。
为了保证提交时提交者和作者信息的正确性，重新恢复user.name和user.email的设置。记住不要照抄照搬下面的命令，请使用您自己的用户名和邮件地址。
$ git config --global user.name "Jiang Xin"
$ git config --global user.email jiangxin@ossxp.com
然后执行下面的命令，重新修改最新的提交，改正作者和提交者的错误信息。
$ git commit --amend --allow-empty --reset-author
说明：
参数--amend是对刚刚的提交进行修补，这样就可以改正前面错误的提交（用户信息错误），而不会产生另外的新提交。
参数--allow-empty是因为要进行修补的提交实际上是一个空白提交，Git默认不允许空白提交。
参数--reset-author的含义是将Author（提交者）的ID重置，否则只会影响最新的Commit（提交者）的ID。这条命令也会重置AuthorDate信息。
---
可以通过执行git diff命令看到修改后的文件和版本库中文件的差异。（实际上这句话有问题，和本地比较的不是版本库中的文件，而是一个中间状态的文件）
---
  877  git log  --oneline 
  878  git log  --oneline  .
  879  git show e19f582

------
git push -u origin master
------
git cmmit 的良好習慣：
提交注释的质量

你的代码写完后是要让人看的，别人从版本库中查看代码的第一件事是读你提交的注释，因此一定要提高注释的质量，标准的做法[^21]是：

	第一行是简要介绍。让人明白做这个改变的原因？而不是你做了什么。
	接着一个空白的一行。
	有需要的话，然后用剩下的文本进行详细介绍。
git clone git://github.com/yahcong/work-envirment.git
--
fatal: remote error:    
You can't push to git://github.com/yahcong/work-envirment.git   Use https://github.com/yahcong/wor
-
如果在Git clone的时候用的是
git://github.com:xx/xxx.git
的形式, 那么就会出现这个问题，因为这个protocol是不支持push的
用
解决办法：
git remote -v
git remote rm origin  
git remote add origin git@github.com:yahcong/work-envirment.git
git remote -v
git push --set-upstream origin master

如果
git clone git@github.com:yahcong/work-envirment.git
就不會出現此問
---
git pull = git fetch + git merge
git pull --rebase = git fetch + git rebase

git pull
合併後分支有岔路，表明合併的過程
git rebase
合併後無岔路，沒有合併過程的記載

在rebase的过程中，也许会出现冲突(conflict). 在这种情况，Git会停止rebase并会让你去解决 冲突；在解决完冲突后，用"git-add"命令去更新这些内容的索引(index), 然后，你无需执行 git-commit,只要执行:$ git rebase --continue
这样git会继续应用(apply)余下的补丁。
在任何时候，你可以用--abort参数来终止rebase的行动，并且"mywork" 分支会回到rebase开始前的状态。
$ git rebase --abort
---
如果你想在rebase的过程中对一部分提交进行修改，你可以在'git rebase'命令中加入'-i'或'--interactive'参数去调用交互模式。
$ git rebase -i origin/master
这个命令会执行交互式rebase操作，操作对象是那些自最后一次从origin仓库拉取或者向origin推送之后的所有提交。
交互式rebase的最后一个作用是丢弃提交。如果把一行删除而不是指定'pick'、'squash'和'edit'中的任何一个，git会从历史中移除该提交。


